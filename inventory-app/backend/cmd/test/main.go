package main

import (
				"fmt"
				"log"
				"path/filepath"
				"github.com/joho/godotenv"
				"inventory-app/backend/internal/db"
				"inventory-app/backend/internal/model"
)

func main() {
	err := godotenv.Load(filepath.Join("..", "..", "..", ".env"))
	if err != nil {
		log.Fatalf("‚ùå .env –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω: %v", err)
	}

	db.Init()
	db.DB.Exec(`TRUNCATE inbound, stock, item, warehouse RESTART IDENTITY CASCADE`)
	// –í—Å—Ç–∞–≤–ª—è–µ–º 1 —Å–∫–ª–∞–¥
	_, err = db.DB.Exec(`
		INSERT INTO warehouse (name, location) VALUES
		('–¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π —Å–∫–ª–∞–¥', '–ú–æ—Å–∫–≤–∞')
	`)
	if err != nil {
		log.Fatalf("‚ùå –û—à–∏–±–∫–∞ –≤—Å—Ç–∞–≤–∫–∏ —Å–∫–ª–∞–¥–∞: %v", err)
	}

	// –í—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–≤–∞—Ä—ã
	_, err = db.DB.Exec(`
		INSERT INTO item (sku, name, uom, reorder_level, reorder_qty, price, cost) VALUES
		('SKU001', '–ú–æ–Ω–∏—Ç–æ—Ä 24"', '—à—Ç', 5, 10, 12999.00, 11000.00),
		('SKU002', '–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞', '—à—Ç', 10, 20, 3499.00, 2500.00),
		('SKU003', '–ú—ã—à—å', '—à—Ç', 15, 30, 1999.00, 1400.00),
		('SKU004', '–§–ª–µ—à–∫–∞ 32GB', '—à—Ç', 10, 25, 599.00, 450.00),
		('SKU005', '–ö–æ–≤—Ä–∏–∫ –¥–ª—è –º—ã—à–∏', '—à—Ç', 20, 50, 299.00, 200.00)
	`)
	if err != nil {
		log.Fatalf("‚ùå –û—à–∏–±–∫–∞ –≤—Å—Ç–∞–≤–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤: %v", err)
	}

	// –í—Å—Ç–∞–≤–∫–∞ –æ—Å—Ç–∞—Ç–∫–æ–≤
	_, err = db.DB.Exec(`
		INSERT INTO stock (item_id, quantity, warehouse_id) VALUES
		(1, 10, 1),
		(2, 25, 1),
		(3, 18, 1),
		(4, 5, 1),
		(5, 9, 1)
	`)
	if err != nil {
		log.Fatalf("‚ùå –û—à–∏–±–∫–∞ –≤—Å—Ç–∞–≤–∫–∏ –æ—Å—Ç–∞—Ç–∫–æ–≤: %v", err)
	}

	// –í—Å—Ç–∞–≤–∫–∞ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏–π
	_, err = db.DB.Exec(`
		INSERT INTO inbound (item_id, supplier_id, quantity, received_by, warehouse_id)
		VALUES
		(1, 1, 10, 2, 1),
		(2, 1, 25, 2, 1),
		(3, 2, 18, 2, 1)
	`)
	if err != nil {
		log.Fatalf("‚ùå –û—à–∏–±–∫–∞ –≤—Å—Ç–∞–≤–∫–∏ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏–π: %v", err)
	}

	log.Println("‚úÖ –í—Å–µ –¥–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –≤—Å—Ç–∞–≤–ª–µ–Ω—ã")

	// –ü—Ä–æ–≤–µ—Ä–∏–º –≤—ã–≤–æ–¥
	var items []model.Item
	err = db.DB.Select(&items, `SELECT * FROM item`)
	if err != nil {
		log.Fatalf("‚ùå –û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∫–∏: %v", err)
	}

	fmt.Println("üì¶ –°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤:")
	for _, item := range items {
		fmt.Printf("- [%s] %s ‚Äî %.2f\n", item.SKU, item.Name, item.Price)
	}
}
